<?php

require_once("const.php");
require_once("Autoloader.php");

Autoloader::autoloadRegister();

use Output\Request    as Request;
use Output\Keyboards  as Keyboards;
use Database\Database as Database;
use Input\Data as Data;


//Get Data
$data = Data::getData();

//Connect to Database
$database = new Database();
$database->updateActivity();

//New template for request
$request  = new Request();


if ($data->message)
{
    switch ($data->data) 
    {
        case 'nextRandImg':

            # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            $request->answerCallbackQuery('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é..');

            # –ê–π–¥–∏ –ø—Ä–æ—à–ª–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            $last_photo = $database->getInformationAboutLastPhoto();
            $last_photo_id = $last_photo['photo_id'];
            $last_photo_file_id = $last_photo['file_tlgrm_id'];
            $last_photo_address = $last_photo['address'];
            if ($last_photo_address) {
                $keyboard[] = [
                    [
                        "text" => "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                        "callback_data" => "gl" . $last_photo_id
                    ]
                ];
            }
            if ($last_photo_file_id) {
                $keyboard[] = [
                    [
                        "text" => "–û—Ä–∏–≥–∏–Ω–∞–ª",
                        "callback_data" => "gf" . $last_photo_id
                    ]
                ];
            }
            $keyboard[] = [
                [
                    "text" => "üíî",
                    "callback_data" => "dislike" . $last_photo_id
                ],
                [
                    "text" => "‚ù§",
                    "callback_data" => "like" . $last_photo_id
                ]
            ];

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $request->createInlineKeyboard($keyboard);
            $request->editMessageReplyMarkup();
            $request->unsetKeyboard();
            unset($keyboard);

            if ($photo = $database->getRandPhoto()) {
                $photo_id = $photo['photo_id'];
                $photo_tlgrm_id = $photo['photo_tlgrm_id'];
                $photo_file_tlgrm_id = $photo['file_tlgrm_id'];
                $photo_caption = $photo['caption'];
                $photo_address = $photo['address'];

                $keyboard[] = [
                    [
                        "text" => "–°–ª–µ–¥—É—é—â–∞—è",
                        "callback_data" => "nextRandImg"
                    ]
                ];
                if ($photo_caption) {
                    $request->createCaption($photo_caption);
                }
                if ($photo_address) {
                    $keyboard[] = [
                        [
                            "text" => "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                            "callback_data" => "gl" . $photo_id
                        ]
                    ];
                }
                if ($photo_file_tlgrm_id) {
                    $keyboard[] = [
                        [
                            "text" => "–û—Ä–∏–≥–∏–Ω–∞–ª",
                            "callback_data" => "gf" . $photo_id
                        ]
                    ];
                }
                $keyboard[] = [
                    [
                        "text" => "üíî",
                        "callback_data" => "dislike" . $photo_id
                    ],
                    [
                        "text" => "‚ù§",
                        "callback_data" => "like" . $photo_id
                    ]
                ];


                $request->createInlineKeyboard($keyboard);
                $request->sendPhoto($photo_tlgrm_id);
                $database->updateViews($photo_id);
            } else {
                $text = "–£ –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üò•\n\r";
                $text = "–ü–æ–ø—Ä–æ–±—É–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ";
                $request->sendMessage($text);
            }

            exit();
        case 'setThisLocation':
            if ($database->checkUploading())
            {
                $latitude    = $data->message->venue->location->latitude;
                $longitude   = $data->message->venue->location->longitude;
                $coordinate  = $latitude . ',' . $longitude;
                $url         = GOOGLE_API_URL_GEOCODE . $coordinate . GOOGLE_API_KEY;
                $update      = json_decode(file_get_contents($url), true);
                $new_address = $update['results'][0]['formatted_address'];

                $keyboard[] = Keyboards::$replySendToModeration;
                $keyboard[] = Keyboards::$replyDeleteAddress;

                if ($database->checkIssetCoordinate()) {
                    $database->updatePhotoCoordinate($new_address);
                    $text = "<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.</b>\n\r\n\r";
                } else {
                    $database->addPhotoCoordinate($new_address);
                    $text = "<b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!</b>\n\r\n\r";
                }
                if ($database->checkIssetFile()) {
                    $keyboard[] = Keyboards::$replyDeleteFile;
                    $text .= "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Point –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\r";
                } else {
                    $text .= "–û—Ç–ø—Ä–∞–≤—å —Ç—É –∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥–µ–ª–∏ –µ–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏.\n\r";
                }

                $database->updatePhotoCaption();
                $request->createReplyKeyboard($keyboard);
                $request->sendMessage($text);
            } 
            exit();
            break;
        case 'howToAttachLocation':
            $text = "<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ—Å—Ç–æ –º–æ–∂–Ω–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:</b> \n\r\n\r";
            $text .= "- –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ, –≤ –æ—Ç–≤–µ—Ç —è –≤—ã–≤–µ–¥—É –≤—Å–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–≥–Ω—ã, —Å—Ä–µ–¥–∏ –Ω–∏—Ö —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\r\n\r";
            $text .= "- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–µ –≤ –≤–∏–¥–µ –ª–æ–∫–∞—Ü–∏–∏\n\r";
            $keyboard[] = Keyboards::$inlineHowToAttachLocationInDetails;
            $keyboard[] = Keyboards::$inlineHowToAttachFile;
            $request->createInlineKeyboard($keyboard);
            $request->editMessageReplyMarkup();
            $request->editMessageText($text);
            exit();
            break;
        case 'howToAttachLocationInDetails':
            $text  = "–ù–∞–∂–º–∏ –Ω–∞ üìé –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏ ¬´Location¬ª;\n\r";
            $text .= "–ï—Å–ª–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ, –≥–¥–µ —Å–¥–µ–ª–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞–∂–º–∏ ¬´Send my current location¬ª.\n\r";
            $text .= "–ï—Å–ª–∏ –∂–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—è —Ç–æ—á–∫—É –ø–æ –∫–∞—Ä—Ç–µ –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Å–¥–µ–ª–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.\n\r\n\r";
            $keyboard[] = Keyboards::$inlineHowToAttachFile;
            $request->createInlineKeyboard($keyboard);
            $request->editMessageReplyMarkup();
            $request->editMessageText($text);
            exit();
            break;
        case 'howToAttachFile':
            $text  = "–ù–∞–∂–º–∏ –Ω–∞ üìé –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏ ¬´File¬ª;\n\r";
            $text .= "–°—Ä–µ–¥–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã–±–µ—Ä–∏ —Ç—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–æ–±–æ–π\n\r";
            $keyboard[] = Keyboards::$inlineHowToAttachLocation;
            $request->createInlineKeyboard($keyboard);
            $request->editMessageReplyMarkup();
            $request->editMessageText($text);
            exit();
            break;
        case 'setSightMode':
            $database->setSightMode();
            $keyboard[] = Keyboards::$inlineUnsetSightMode;
            $request->createInlineKeyboard($keyboard);
            $request->editMessageReplyMarkup();
            exit();
            break;
        case 'unsetSightMode':
            $database->unsetSightMode();
            $keyboard[] = Keyboards::$inlineSetSightMode;
            $request->createInlineKeyboard($keyboard);
            $request->editMessageReplyMarkup();
            exit();
            break;
    }

    if (substr($data->data, 0, 4)  == "like")
    {
        $photo_id = substr($data->data, 4);

        if ($database->checkAlreadyLike($photo_id)) {
            $request->answerCallbackQuery('‚ù§ —É–∂–µ —Å—Ç–æ–∏—Ç', true);
            exit();
        }

        $request->answerCallbackQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ ‚ù§');
        $database->setLike($photo_id);

        if ($pay_info = $database->checkLikesToPay($photo_id))
        {

            $money = $pay_info['money'];
            $likes = (int)$pay_info['likes'] + 1;
            $views = $pay_info['views'];


            $author_info = $database->getInfoAboutAuthor($photo_id);
            $author_chat_id = $author_info['chat_id'];
            $photo_tlgrm_id = $author_info['photo_tlgrm_id'];

            $textForAuthor = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n";
            $textForAuthor .= "–¢–≤–æ—è —Ñ–æ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞–±–∞—Ä–∞–ª–∞ " . $likes . " ‚ù§ –∑–∞ " . $views . " –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n";


            if ($database->checkIssetPhone()) {
                $textForAuthor .= "–°–∫–æ—Ä–æ —è –ø–µ—Ä–µ–≤–µ–¥—É –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ç–≤–æ–π QIWI üí∏";
            } else {
                $textForAuthor .= "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ –∫—É–¥–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏";
                $request->createReplyKeyboard(Keyboards::$replySendContact);
            }

            $request->createCaption($textForAuthor);
            $request->sendPhoto($photo_tlgrm_id, $author_chat_id);

            $request->unsetKeyboard();
            $textForAdmin = "–ï—â–µ –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞–±—Ä–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ù§";
            if (is_array($admins_chat_id = $database->getAdminsChatID())) {
                foreach ($admins_chat_id as $admin_chat_id) {
                    $request->sendMessage($textForAdmin, $admin_chat_id);
                }
            } else {
                $request->sendMessage($textForAdmin, $admins_chat_id);
            }
        }
        exit();
    }
    if (substr($data->data, 0, 7)  == "dislike")
    {
        $photo_id = substr($data->data, 7);

        if ($database->checkAlreadyDislike($photo_id))
        {
            $request->answerCallbackQuery('üòì');
            $database->setDislike($photo_id);
        }
        else
        {
            $request->answerCallbackQuery('üíî —É–∂–µ —Å—Ç–æ–∏—Ç', true);
        }
        exit();
    }
    if (substr($data->data, 0, 2)  == "gf")
    {
        $request->answerCallbackQuery('–ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç..');
        $photo_id = substr($data->data, 2);
        
        if ($file_photo_id = $database->getFile($photo_id))
        {
            if ($database->checkAlreadyReport($photo_id, 1))
            {
                $caption = '–ñ–∞–ª–æ–±–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
            }
            else
            {
                $caption = '–ú–æ–∂–µ—à—å –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π';
                $keyboard[] = [
                    [
                        "text" => "–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
                        "callback_data" => "reportF" . $photo_id
                    ]
                ];
                $request->createInlineKeyboard($keyboard);
            }

            $request->createCaption($caption);
            $request->sendFile($file_photo_id);
        }
        else
        {
            $request->answerCallbackQuery('–û—Ä–∏–≥–∏–Ω–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω üòì', true);
        }
        exit();
    }
    if (substr($data->data, 0, 2)  == "gl")
    {
        $request->answerCallbackQuery('–ó–∞–≥—Ä—É–∂–∞—é –ª–æ–∫–∞—Ü–∏—é..');
        $photo_id = substr($data->data, 2);
        if ($venue = $database->getAddress($photo_id))
        {
            if (!$database->checkAlreadyReport($photo_id, 0))
            {
                $keyboard[] = [
                    [
                        "text" => "–ú–µ—Å—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç",
                        "callback_data" => "reportL" . $photo_id
                    ]
                ];
                $request->createInlineKeyboard($keyboard);
            }
            
            if ($venue['address']) 
            {
                $request->sendVenue($venue);
            }
            else 
            {
                $location = $venue;
                $request->sendLocation($venue);
            }
        }
        else
        {
            $request->answerCallbackQuery('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω üòì', true);
        }
        exit();
    }
    if (substr($data->data, 0, 6)  == "report")
    {
        $subject  = $data->data{6};
        $photo_id = substr($data->data, 7);
        switch ($subject)
        {
            case 'L' :
                $subject_index = 0;
                break;
            case 'F' :
                $subject_index = 1;
                break;
        }

        if ($database->checkAlreadyReport($photo_id, $subject_index))
        {
            $answer = '–ñ–∞–ª–æ–±–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞';
            $request->answerCallbackQuery($answer, true);
        }
        else
        {
            $answer = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É';
            $request->answerCallbackQuery($answer);
            $request->createInlineKeyboard([]);
            $request->editMessageReplyMarkup();
            $database->createNewReport($photo_id, $subject_index);
        }
        exit();
    }
    if (substr($data->data, 0, 10) == "nextGeoImg")
    {
        $request->answerCallbackQuery('–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é..');
        $num   = (int) substr($data->data, 10);
        $photo = $database->getNearPhoto($num);

        if (count($photo) == 2){
            $last_photo  = $photo[0];
            $next_photo  = $photo[1];
        }
        else{
            $last_photo = $photo;
        }

        $last_photo_id       = $last_photo['photo_id'];
        $last_photo_tlgrm_id = $last_photo['photo'];
        $last_file           = $last_photo['file'];
        $last_address        = $last_photo['address'];
        if ($last_address) {
            $keyboard[] = [
                [
                    "text" => "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                    "callback_data" => "gl" . $last_photo_id
                ]
            ];
        }
        if ($last_file) {
            $keyboard[] = [
                [
                    "text" => "–û—Ä–∏–≥–∏–Ω–∞–ª",
                    "callback_data" => "gf" . $last_photo_id
                ]
            ];
        }
        $keyboard[] = [
            [
                "text" => "üíî",
                "callback_data" => "dislike" . $last_photo_id
            ],
            [
                "text" => "‚ù§",
                "callback_data" => "like" . $last_photo_id
            ]
        ];

        $request->createInlineKeyboard($keyboard);
        $request->editMessageReplyMarkup();

        if ($next_photo)
        {
            unset($keyboard);
            $request->unsetKeyboard();

            $next_num = $num + 1;
            $next_photo_tlgrm_id = $next_photo['photo'];
            $next_photo_id       = $next_photo['photo_id'];
            $next_file           = $next_photo['file'];
            $next_address        = $next_photo['address'];
            $next_caption        = $next_photo['caption'] . "\n";
            $next_caption       .= "–î–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ " . round((float) $next_photo['distance'], 2) . "–∫–º";
            $keyboard[] = [
                [
                    "text" => "–°–ª–µ–¥—É—é—â–∞—è",
                    "callback_data" => "nextGeoImg".$next_num
                ]
            ];
            if ($next_address) {
                $keyboard[] = [
                    [
                        "text" => "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                        "callback_data" => "gl" . $next_photo_id
                    ]
                ];
            }
            if ($next_file) {
                $keyboard[] = [
                    [
                        "text" => "–û—Ä–∏–≥–∏–Ω–∞–ª",
                        "callback_data" => "gf" . $next_photo_id
                    ]
                ];
            }
            $keyboard[] = [
                [
                    "text" => "üíî",
                    "callback_data" => "dislike" . $next_photo_id
                ],
                [
                    "text" => "‚ù§",
                    "callback_data" => "like" . $next_photo_id
                ]
            ];

            $request->createCaption($next_caption);
            $request->createInlineKeyboard($keyboard);
            $request->sendPhoto($next_photo_tlgrm_id);
        }
        else
        {
            $text  = "<b>–ù–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>.\n\r\n\r";
            $text .= "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /dist_* (–≥–¥–µ ¬´*¬ª - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).\n\r";
            $text .= "<i>–ü—Ä–∏–º–µ—Ä</i>: /dist_3.";
            $request->unsetKeyboard();
            $request->sendMessage($text);            
        }
        
        exit();
    }
}
else
{
    if ($data->photo) {
        if ($database->checkBlackList()) {
            $text = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏";
            $request->sendMessage($text);

            exit();
        } 
        elseif ($database->checkLimit()) {
            $text = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ " . LIMIT_PICS . " —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞ —Ä–∞–∑.\n\r";
            $text .= "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–π–¥—É—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é.";

            $request->sendMessage($text);

            exit();
        }
        elseif ($database->checkUploading()) {
            if ($database->checkIssetCoordinate())
            {
                $caption    = "–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç Point –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π.\n";
                $keyboard[] = Keyboards::$replySendToModeration;
                $keyboard[] = Keyboards::$replyDeleteAddress;
                if ($database->checkIssetFile()) {
                    $keyboard[] = Keyboards::$replyDeleteFile;
                }
            }
            else
            {
                $caption  = "–ü—Ä–∏–∫—Ä–µ–ø–∏ –∫ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n";
                $caption .= "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π Point.\n";
                if ($database->checkIssetFile()) {
                    $keyboard[] = Keyboards::$replyDeleteFile;
                }
            }
            
            $photo   = $database->getPhotoFileIDOnUploading();
            
            $request->createCaption($caption);
            $request->createReplyKeyboard($keyboard);
            $request->sendPhoto($photo);
            exit();
        }

        $database->sendToUploading();

        $text  = "–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!\n\r\n\r";
        $text .= "–û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –∏ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\r";
        $text .= "–ü—Ä–∏–∫—Ä–µ–ø–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ç–∞–∫ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–ª—å—à–µ ‚ù§.\n\r\n\r";
        $request->sendMessage($text);

        $text = "<i>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>.";
        $keyboard[] = Keyboards::$inlineHowToAttachLocation;
        $keyboard[] = Keyboards::$inlineHowToAttachFile;
        $request->createInlineKeyboard($keyboard);
        $request->sendMessage($text);

        exit();
    }
    if ($data->document) {
        if ($database->checkUploading()) {
            if (substr($data->document->mime_type, 0, 5) == 'image')
            {
                $keyboard[] = Keyboards::$replySendToModeration;
                $keyboard[] = Keyboards::$replyDeleteFile;

                if ($database->checkIssetFile()) {
                    $text  = "–ö —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç.\n\r";
                    $text .= "–£–¥–∞–ª–∏ –µ–≥–æ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π";

                    if ($database->checkIssetCoordinate())
                    {
                        $keyboard[] = Keyboards::$replyDeleteAddress;
                    }

                    $request->createReplyKeyboard($keyboard);
                    $request->sendMessage($text);

                    exit();
                }
                else
                {
                    $database->addFile();
                    $text = "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!</b>\n\r";
                }

                if (!$database->checkIssetCoordinate()) {
                    $text .= "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å –º–µ—Å—Ç–∞, –≥–¥–µ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥–ª–∏ —Ç–∞–º –ø–æ–±—ã–≤–∞—Ç—å.\n\r";
                } else {
                    $text .= "–¢–µ–ø–µ—Ä—å Point –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n";
                    $keyboard[] = Keyboards::$replyDeleteAddress;
                }

                $request->createReplyKeyboard($keyboard);
                $request->sendMessage($text);
                exit();
            }
            else {
                $text = "–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.\n\r";
                $request->sendMessage($text);
            }
        }
        else
        {
            $text = "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é";
            $request->sendMessage($text);
        }
    }
    if ($data->location)
    {
        if ($database->checkUploading())
        {
            $keyboard[] = Keyboards::$replySendToModeration;
            $keyboard[] = Keyboards::$replyDeleteAddress;

            if (!$database->checkIssetCoordinate()) {
                $latitude  = $data->location->latitude;
                $longitude = $data->location->longitude;
                
                $url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=$latitude,$longitude&language=ru&result_type=street_address&key=AIzaSyAoSshruro4rvjdMicj1c0mvchKAVLMBg4";
                $update = json_decode(file_get_contents($url), true);
                $address = $update['results'][0]['formatted_address'];
                $database->addPhotoCoordinate($address);
                $text = "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!</b>\n\r";
            }
            else
            {
                $text  = "<b>–ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è</b>\n\r.";
                $text .= "–£–¥–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é..";

                if ($database->checkIssetFile())
                {
                    $keyboard[] = Keyboards::$replyDeleteFile;
                }

                $request->createReplyKeyboard($keyboard);
                $request->sendMessage($text);

                exit();
            }

            if (!$database->checkIssetFile()) {
                $text .= "–ü—Ä–∏–∫—Ä–µ–ø–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —á—Ç–æ–±—ã –ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –µ–µ –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É.\n\r";
            }
            else
            {
                $keyboard[] = Keyboards::$replyDeleteFile;
                $text .= "–¢–µ–ø–µ—Ä—å Point –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n";
            }

            $request->createReplyKeyboard($keyboard);
            $request->sendMessage($text);
            
            exit();
        }
        $database->updateUserCoordinate();
        if ($photo = $database->getNearPhoto()){
            $photo_tlgrm_id = $photo['photo'];
            $photo_id       = $photo['photo_id'];
            $file           = $photo['file'];
            $address        = $photo['address'];
            $caption        = $photo['caption'] . "\n";
            $caption       .= "–î–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ " . round((float) $photo['distance'], 2) . "–∫–º";
            $keyboard[]     = [
                [
                    "text" => "–°–ª–µ–¥—É—é—â–∏–π",
                    "callback_data" => "nextGeoImg0"
                ]
            ];
            if ($address) {
                $keyboard[] = [
                    [
                        "text" => "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                        "callback_data" => "gl" . $photo_id
                    ]
                ];
            }
            if ($file) {
                $keyboard[] = [
                    [
                        "text" => "–û—Ä–∏–≥–∏–Ω–∞–ª",
                        "callback_data" => "gf" . $photo_id
                    ]
                ];
            }
            $keyboard[] = [
                [
                    "text" => "üíî",
                    "callback_data" => "dislike" . $photo_id
                ],
                [
                    "text" => "‚ù§",
                    "callback_data" => "like" . $photo_id
                ]
            ];

            $request->createCaption($caption);
            $request->createInlineKeyboard($keyboard);
            $request->sendPhoto($photo_tlgrm_id);
            $database->updateViews($photo_id);
        }
        exit();
    }
    if ($input_text = $data->text)
    {
        if ($input_text == "/start")
        {
            if ($database->checkNewUser())
            {
                $database->createNewUser();
            }

            $text = "–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è, " . "<b>" . $data->from->first_name . "</b>" . "\n\r\n\r";

            $text .= "<b>Point</b> - —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–µ —Å –µ–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ." . "\n\r";
            $text .= "<i>–¢–∞–∫ –∂–µ Point –≤ –≤–∏–¥–µ –±–æ–Ω—É—Å–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–µ–∑ —Å–∂–∞—Ç–∏—è</i>." . "\n\r\n\r";

            $text .= "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å Point, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ç–æ–±–æ–π —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –º–µ—Å—Ç–∞, –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π." . "\n\r\n\r";

            $text .= "–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ –º–µ—Å—Ç–∞–º–∏." . "\n\r";
            $text .= "–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞ –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º." . "\n\r\n\r";

            $text .= "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å —É —Ç–µ–±—è –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏." . "\n\r";

            $request->createReplyKeyboard(Keyboards::$replyDefault);
            $request->sendMessage($text);
            exit();
        }
        if ($input_text == "–ü–æ–º–æ—â—å")
        {
            $text .= "<b>Point</b> - —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–µ —Å –µ–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ." . "\n\r";
            $text .= "<i>–¢–∞–∫ –∂–µ Point –≤ –≤–∏–¥–µ –±–æ–Ω—É—Å–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–µ–∑ —Å–∂–∞—Ç–∏—è</i>." . "\n\r\n\r";

            $text .= "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å Point, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ç–æ–±–æ–π —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –º–µ—Å—Ç–∞, –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π." . "\n\r\n\r";

            $text .= "–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ –º–µ—Å—Ç–∞–º–∏." . "\n\r";
            $text .= "–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞ –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º." . "\n\r\n\r";

            $text .= "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å —É —Ç–µ–±—è –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏." . "\n\r";

            $request->createReplyKeyboard(Keyboards::$replyDefault);
            $request->sendMessage($text);
            exit();
        }
        if ($input_text == "/chatid") {
            $request->sendMessage($data->chat->id);
            exit();
        }
        if ($input_text == "–°–ª—É—á–∞–π–Ω—ã–π Point")
        {
            if ($photo = $database->getRandPhoto())
            {
                $photo_id = $photo['photo_id'];
                $photo_tlgrm_id = $photo['photo_tlgrm_id'];
                $photo_file_tlgrm_id = $photo['file_tlgrm_id'];
                $photo_caption = $photo['caption'];
                $photo_address = $photo['address'];

                $keyboard[] = [
                    [
                        "text" => "–°–ª–µ–¥—É—é—â–∏–π",
                        "callback_data" => "nextRandImg"
                    ]
                ];
                if ($photo_caption) {
                    $request->createCaption($photo_caption);
                }
                if ($photo_address) {
                    $keyboard[] = [
                        [
                            "text" => "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                            "callback_data" => "gl" . $photo_id
                        ]
                    ];
                }
                if ($photo_file_tlgrm_id) {
                    $keyboard[] = [
                        [
                            "text" => "–û—Ä–∏–≥–∏–Ω–∞–ª",
                            "callback_data" => "gf" . $photo_id
                        ]
                    ];
                }
                $keyboard[] = [
                    [
                        "text" => "üíî",
                        "callback_data" => "dislike" . $photo_id
                    ],
                    [
                        "text" => "‚ù§",
                        "callback_data" => "like" . $photo_id
                    ]
                ];

                $request->createInlineKeyboard($keyboard);
                $request->sendPhoto($photo_tlgrm_id);
                $database->updateViews($photo_id);
            }
            else
            {
                $text = '–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã';
                $request->sendMessage($text);
            }

            exit();
        }
        if ($input_text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        {
            $user_distance = $database->getUserDistance();
            
            $text  = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å:"."\n\r\n\r";
            $text .= "<b>- –ò–∑–º–Ω–µ–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞</b>."."\n\r";
            $text .= "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /dist* –≥–¥–µ ¬´*¬ª - —Ä–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö."."\n\r\n\r";
            $text .= "<i>–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º.</i>"."\n\r\n\r";
            $text .= "<b>- –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å Sight Mode</b>."."\n\r";
            $text .= "<i>Sight Mode</i> - —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ (Point) <b>–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</b>"."\n\r\n\r";
            $text .= "–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ - ".$user_distance." –∫–º";
            
            if ($database->checkSightMode()) {
                $keyboard[] = Keyboards::$inlineUnsetSightMode;
            }
            else {
                $keyboard[] = Keyboards::$inlineSetSightMode;
            }
            $request->createInlineKeyboard($keyboard);
            $request->sendMessage($text);
            exit();
        }
        if (substr($input_text, 0, 5)  == "/dist")
        {
            $new_distance = (int) substr($input_text, 5);
            if ($new_distance != 0) {
                if ($new_distance < 7000)
                {
                    $database->updateUserDistance($new_distance);
                    $text = "–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ".$new_distance." –∫–º"."\n\r";
                    $request->sendMessage($text);
                }
                else
                {
                    $text = "–ü–æ–ø—Ä–æ–±—É–π —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ"."\n\r";
                    $request->sendMessage($text);
                }
            }
            else
            {
                $text  = "<b>–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ üòì</b>"."\n\r";
                $text .= "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:"."\n\r";
                $text .= "/dist13";
                $request->sendMessage($text);
            }
            
            
        }
        if ($database->checkUploading())
        {
            if ($input_text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
            {
                if ($database->checkIssetCoordinate())
                {
                    $database->sendToModeration();
                    $text = "<b>Point —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>.\n\r";
                    $request->createReplyKeyboard(Keyboards::$replyDefault);
                }
                else
                {
                    $text = "<b>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Point –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ—Å—Ç–æ</b>.\n\r";
                    $keyboard[] = Keyboards::$inlineHowToAttachLocation;
                    $request->createInlineKeyboard($keyboard);
                }
                $request->sendMessage($text);
                exit();
            }
            if ($input_text == '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª')
            {
                $database->deleteFile();
                $text = "–§–∞–π–ª —É–¥–∞–ª–µ–Ω";
                $keyboard[] = Keyboards::$replySendToModeration;
                !$database->checkIssetCoordinate() ?: $keyboard[] = Keyboards::$replyDeleteAddress;
                $request->createReplyKeyboard($keyboard);
                $request->sendMessage($text);
                exit();
            }
            if ($input_text == '–£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ')
            {
                $database->deleteCoordinate();
                $text = "–ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω";
                $keyboard[] = Keyboards::$replySendToModeration;
                !$database->checkIssetFile() ?: $keyboard[] = Keyboards::$replyDeleteFile;
                $request->createReplyKeyboard($keyboard);
                $request->sendMessage($text);
                exit();
            }

            $address = urlencode($data->text);
            $url = GOOGLE_API_URL_FIND_PLACE . $address . GOOGLE_API_KEY;
            $update = json_decode(file_get_contents($url), true);

            $results = $update['results'];
            $status  = $update['status'];

            if ($status == 'OK')
            {
                $results_num = count($results);

                switch ($results_num) {
                    case 1 :
                        $place = '–º–µ—Å—Ç–æ';
                        break;
                    case 2:
                    case 3:
                    case 4:
                        $place = '–º–µ—Å—Ç–∞';
                        break;
                    default:
                        $place = '–º–µ—Å—Ç';
                        break;
                }

                $text  = "<b>–ù–∞–π–¥–µ–Ω–æ ".$results_num." ".$place."</b>\n\r\n\r";

                if ($results_num > 1){
                    $text .= "–ö–∞–∫–æ–µ –∏–∑ –Ω–∏—Ö –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?\n\r\n\r";
                }
                else {
                    $text .= "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ª–æ–∫–∞—Ü–∏–µ–π —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\r\n\r";
                }

                $request->sendMessage($text);

                foreach ($results as $result)
                {
                    $venue['address'] = $result['formatted_address'];
                    $venue['lat']     = $result['geometry']['location']['lat'];
                    $venue['lng']     = $result['geometry']['location']['lng'];
                    $venue['title']   = $result['name'];
                    $request->createInlineKeyboard(Keyboards::$inlineSetThisLocation);
                    $request->sendVenue($venue);
                }

                $text  = "<b>–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞?</b>\n\r";
            }
            else
            {
                $text  = "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ ¬´".$input_text."¬ª üò• \n\r";
            }

            $text .= "–ü–æ–ø—Ä–æ–±—É–π:\n\r";
            $text .= "- —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É,\n\r";
            $text .= "- —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é";
            $request->createInlineKeyboard([Keyboards::$inlineHowToAttachLocation]);
            $request->sendMessage($text);
            $request->hideKeyboard();
            exit();
        }

    }
}
